import tkinter as tk
from tkinter import *
from random import randint

def startCommands ():
    introduction ();
    startScreen.destroy ();

def nextPageCommands ():
    howToPlay ();
    introScreen.destroy ();    

def prevPageCommands ():
    introduction ();
    howToPlayScreen.destroy ();


# Starting Screen ===========

def gameTitle ():
    global bgImage, startScreen

    startScreen = tk.Tk ();
    startScreen.title ("Catch Levoski");
    startScreen.geometry ("500x500");
    startScreen.resizable(width=FALSE, height=FALSE);

    c = 250; # center of window

    bgImage = PhotoImage(file = "FBL Badge.png");
    bg = Label (startScreen, image = bgImage, bg = "grey");
    bg.place (x = 0, y = 0, relwidth = 1, relheight = 1);

    titleFrame = Frame (bg);
    titleFrame.place (x = c, y = 150, anchor = 'center');

    headingFrame = Frame (bg);
    headingFrame.place (x = c, y = 225, anchor = 'center');

    title = Label (titleFrame, text = "Catch Levoski");
    title['font'] = ("Courier", 32, "bold");
    title.pack ();

    subheading = Label (headingFrame, text = "Are you ready to catch the undercover\n"
                                             "spy, Levoski?");
    subheading['font'] = ("Courier", 14);
    subheading.pack ();

    start = Button (startScreen, text = "Start", command = startCommands);
    start.place (x = c, y = 400, anchor = 'center');
    start['font'] = ("Helvetica", 12);



# Introduction Screen ==============

def introduction ():

    global introScreen
    introScreen = tk.Tk ();
    introScreen.title ("Catch Levoski: Introduction");
    introScreen.geometry ("500x500");
    introScreen.resizable(width=FALSE, height=FALSE);

    c = 500/2;

    introTitle = Label (introScreen, text = "Introduction");
    introTitle['font'] = ("Helvetica", 25, "bold", "underline");
    introTitle.place (x = c, y = 25, anchor = 'center');

    story = Label (introScreen, text = "Hello, Fabulous Bureau of Liberations (FBL)\n"
                                        "secret agent. This is the FBL headquarters.\n\n"
                                        "Levoski, the undercover spy, has captured\n"
                                        "your partner, Alina. She's trapped in a\n"
                                        "locked room with him and it's up to you to\n"
                                        "free her. You're the only FBL agent able to\n"
                                        "do it. You just need to get past this locked\n"
                                        "door to get to him. You'll need to use your\n"
                                        "logical thinking and deduction skills to\n"
                                        "solve his tricky code.\n\n"
                                        "Good luck agent, report back soon.");
    story['font'] = ("Courier", 12);
    story.place (x = c, y = 200, anchor = 'center');

    nextPage = Button (introScreen, text = "Next Page >>", command = nextPageCommands);
    nextPage.place (x = c, y = 475, anchor = 'center');
    nextPage['font'] = ("Helvetica", 10, "italic");

    skip = Button (introScreen, text = "Skip")   #, command = GAME_COMMAND_GOES_HERE);
    skip.place (x = 460, y = 475, anchor = 'center');
    skip['font'] = ("Helvetica", 10, "italic");



# How to Play Screen =============

def howToPlay ():

    global howToPlayScreen
    howToPlayScreen = tk.Tk ();
    howToPlayScreen.title ("Catch Levoski: How to Play & Rules");
    howToPlayScreen.geometry ("750x500");
    howToPlayScreen.resizable(width=FALSE, height=FALSE);

    c = 750/2;

    rulesTitle = Label (howToPlayScreen, text = "How to Play & Rules");
    rulesTitle['font'] = ("Helvetica", 25, "bold", "underline");
    rulesTitle.place (x = c, y = 25, anchor = 'center');

    instructions = Label (howToPlayScreen,
                          text = "The door lock will have a randomly generated 4-digit code and you will have 12 tries to\n"
                                 "guess the correct code. If you don't guess it correctly in those 12 tries, then you wll \n"
                                 "fail the mission and Levoski will get away. Remember, the code can have duplicate numbers. \n"
                                 "For example the code could be '2533' or '1141'. \n\n"
                                 "To input your guess, use the 6 different numbers given at the bottom of the screen. \n"
                                 "If you make a mistake inputting your code, then you can redo that guess by pressing \n"
                                 "the 'Redo' button underneath the 6 numbers. \n"
                                 "When you are ready to submit your 4-digit guess, click on the 'Check' button beside the \n"
                                 "'Redo' button. \n\n"
                                 "When you submit your guess, the door will check if any of your inputs were correct \n"
                                 "using these indicators: \n"
                                 " - White dot when you guess a correct number but not in the correct position \n"
                                 " - Green dot when you guess a correct number AND in the correct position \n"
                                 " - Red dot when a number is not correct \n"
                                 "There will be 4 dots in total, the same as the number of digits in the code. \n\n"
                                 "If you did not correctly guess the entire code, then you'll have another guess, \n"
                                 "but you only have 12 in total so be careful. \n\n"
                                 "If you do guess the correct code, then you win! You made it in time to save Alina \n"
                                 "and beat Levoski!",
                          justify = LEFT);
    instructions['font'] = ("Courier", 10);
    instructions.place (x = c, y = 250, anchor = 'center');

    prevPage = Button (howToPlayScreen, text = "<< Prev. Page", command = prevPageCommands);
    prevPage.place (x = c, y = 475, anchor = 'center');
    prevPage['font'] = ("Helvetica", 10, "italic");

    ok = Button (howToPlayScreen, text = "OK")   #, command = GAME_COMMAND_GOES_HERE);
    ok.place (x = 715, y = 475, anchor = 'center');
    ok['font'] = ("Helvetica", 10, "italic");



# Main Program =============================

gameTitle();



inputList = ''
numberOfGuess = 0
state = "empty"
window = tk.Tk()
window.title("Mastermind Game")


# Secret code (Random numbers)
def code ():
     global arrayOfArrangement, backuplist
     secretArrangement = ''

     while len(secretArrangement) != 4 :
    # While the number of arrayOfArrangement is NOT 4

         randomNumber = str(randint(1, 6)); # There are 6 numbers
         secretArrangement = secretArrangement + randomNumber;

     arrayOfArrangement = list(secretArrangement);
     backuplist = arrayOfArrangement

     return arrayOfArrangement


array = code()

#I must creates a variable that stores the same thing as array but IS NOT affected by the change in array


lblInst = tk.Label(window, text = "MASTERMIND", fg = "red"). grid(row=0, column=0)
lblLine0 = tk.Label(window, text = "************we'll design empty space if we can************").grid(row=1, column=0)
lblSecArrangement = tk.Label(window, text="We'll show the secret arrangement here").grid(row=10, column=0)
lblEmptyLine = tk.Label(window, text = "").grid(row=15, column=0, columnspan=5)


buttons = []
for number in range(0, 7):
    button = tk.Button(window, text=number, command=lambda number=number: userInput(number), state = tk.DISABLED)
    buttons.append(button)

btnStartGame = tk.Button(window, text="Start Game", command=lambda : start())
btnEraseGame = tk.Button(window, text="Erase", command=lambda : erase())
##btnCheck = tk.Button(window, text="Check", command=lambda : position(array), state = tk.DISABLED)
btnCheck = tk.Button(window, text="Check", command=lambda : position(), state = tk.DISABLED)


for col in range(1, 7):
          buttons[col].grid(row= 11, column=col)

btnStartGame.grid(row=14, column=0)
btnEraseGame.grid(row=14, column=1)
btnCheck.grid(row=14, column=2)








def start():
    global state, array


    for button in buttons :
        button["state"] = tk.NORMAL

        if state =="empty":
            state = "started"
            btnStartGame["text"] = "Restart"
            array = code()
            print("wow", array)
            blank()



def userInput(number):
     global buttons, inputList, arrayOfInput

     IM = str(number) #List did not work here so I removed the brackets
     inputList = inputList + IM
     arrayOfInput = list(inputList)
     limit() #don't pass it


def limit(): #no parameter
     global state, arrayOfInput #add to globals in both defs
     

     if len(arrayOfInput)==4:
          print(arrayOfInput)
          print("You've reached the last number you can enter")
          btnCheck["state"] = tk.NORMAL
          for button in buttons :
               button["state"] = tk.DISABLED
               state ="empty"
               
     else:
          print("You've entered : ",len(arrayOfInput), "th number")


arrayOfInput= [] #declare here but empty


def blank():
     global inputList, numberOfGuess

     inputList = ''
     numberOfGuess = 0
     lblNGuess = tk.Label(window, text = "Number of Guesses:  " + str(numberOfGuess)).grid(row=4, column=0)



def erase():
    global inputList, arrayOfArrangement, backuplist

    inputList = ''
    for button in buttons :
        button["state"] = tk.NORMAL
        



# Digits that are the correct number AND in the correct position ****First
def position ():
     global q, numberOfGuess, arrayOfArrangement
     numberOfGuess += 1 #  It doesn't work lol
     lblNGuess = tk.Label(window, text = "Number of Guesses:  " + str(numberOfGuess)).grid(row=4, column=0)

     q = 10
     rightPosition = 0

     for x in range (0,4):
          if arrayOfInput[x] == arrayOfArrangement[x]:
               arrayOfArrangement[x] = ''
               arrayOfInput[x] = 'empty'
               rightPosition += 1
               print (arrayOfInput);

     print (rightPosition);

     #Code for the indicators
     #Position + number is correct

     for star in range (0, rightPosition):
          bothIndic = Label (window, text = "*", fg = "red")
          bothIndic['font'] = ("Helvetica", 20);
          bothIndic.place (x = q, y = 25,);
          q += 25
      
     wrongPosition(rightPosition, q)
         
     return(rightPosition);


# Digits that are the correct number NOT in the correct position
def wrongPosition (bothRight, q):
     global arrayOfArrangement
     rightNum = 0

     count = 4;

     y = 0;

     while count != 0:

          for item in range (0, 4):

               if arrayOfInput[y] == arrayOfArrangement[item]:
                    arrayOfInput[y] = 'empty'
                    arrayOfArrangement[item] = ''
                    rightNum += 1;
                    print (arrayOfArrangement);
                   
          y += 1

          count -= 1

         
      # Number is correct
     for star in range (0, rightNum):
          oneIndic = Label (window, text = "*", fg = "grey")
          oneIndic['font'] = ("Helvetica", 20);
          oneIndic.place (x = q, y = 25);
          q += 25

      # Not correct
     noneRight = 4 - bothRight - rightNum

     for star in range (0, noneRight):
          noneIndic = Label (window, text = "*", fg = "black")
          noneIndic['font'] = ("Helvetica", 20);
          noneIndic.place (x = q + star, y = 25);
          q += 25

         
     print (rightNum);
     arrayOfArrangement = backuplist
     return(rightNum);



